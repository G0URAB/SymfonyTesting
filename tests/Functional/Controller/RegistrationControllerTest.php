<?php

namespace App\Tests\Functional\Controller;

use App\Entity\User;
use App\Repository\UserRepository;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class RegistrationControllerTest extends WebTestCase
{

    private $client;
    private $crawler;
    private $form;
    private $entityManager;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = static::createClient();
        self::bootKernel();
        $container = self::$container;
        $this->entityManager = $container
            ->get('doctrine')
            ->getManager();
        $this->crawler = $this->client->request('GET', '/register');
        $this->form = $this->crawler->selectButton('Register')->form();
        $this->makeSureDatabaseIsEmpty();
    }

    public function testRegistrationExistence()
    {
        $this->assertResponseIsSuccessful();
    }

    public function testRegistrationFormContents()
    {
        //The first header in registration form is "Register"
        $this->assertSelectorTextContains('h1', 'Register');

        //There should be at least three input fields i.e email, password & confirm-password
        $this->assertEquals(4, $this->crawler->filter('input')->count());
    }

    public function testRegistrationFailsBecauseAllFieldsAreMissing()
    {
        $this->client->submit($this->form);
        $this->assertFalse($this->client->getResponse()->isRedirect('/'));
    }

    public function testNewUserRegistration()
    {
        $this->form['registration_form[email]']->setValue('grv_sh@yahoo.co.in');
        $this->form['registration_form[plainPassword][first]']->setValue('morePizza');
        $this->form['registration_form[plainPassword][second]']->setValue('morePizza');
        $this->client->submit($this->form);
        $this->assertResponseRedirects("/");

        $user = static::$container->get(UserRepository::class)->findOneByEmail("grv_sh@yahoo.co.in");
        $this->entityManager->remove($user);
        $this->entityManager->flush();

        /*$email = $this->getMailerMessage(0);
        $this->assertEmailHeaderSame($email, 'To', 'grv_sh@yahoo.co.in');*/
    }

    public function makeSureDatabaseIsEmpty()
    {
        $users =$this->entityManager->getRepository(User::class)->findAll();
        foreach($users as $user)
        {
            $this->entityManager->remove($user);
            $this->entityManager->flush();
        }
    }

    protected function tearDown(): void
    {
        parent::tearDown();

        // doing this is recommended to avoid memory leaks
        $this->entityManager->close();
        $this->entityManager = null;
    }
}